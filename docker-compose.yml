services:
  django:
    build: ./backend
    container_name: django
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379
      - SMS_CODE_REQUEST_COOLDOWN=${CODE_REQUEST_COOLDOWN_TIME}
      - SMS_CODE_LIFESPAN=${CODE_LIFETIME}
      - CONTAINER=1
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    volumes:
      - ./backend/e_commerce:/app/e_commerce
    develop:
      watch:
        - action: rebuild
          path: ./backend/pyproject.toml
    command: >
      sh -c "poetry run python manage.py migrate &&
             poetry run python manage.py runserver 0.0.0.0:8000"

  celery:
    build: ./backend
    container_name: celery_worker
    command: poetry run celery -A ecom_core worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
    depends_on:
      - redis
      - django

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - 6379

  db:
    image: postgres:latest
    container_name: db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file:
      - .env
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER:-postgres}", "-d", "${POSTGRES_DB:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  db-data:
